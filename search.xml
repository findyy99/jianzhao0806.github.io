<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Gcam</title>
    <url>/2020/03/10/Gcam/</url>
    <content><![CDATA[<h2 id="Googel-Camera-for-OnePlus-7T"><a href="#Googel-Camera-for-OnePlus-7T" class="headerlink" title="Googel Camera for OnePlus 7T"></a>Googel Camera for OnePlus 7T</h2><p><a href="https://pan.baidu.com/s/1bkmgt1AdbNIAUSb1wqgRqg" target="_blank" rel="noopener">百度云盘</a>(提取码k3fw4)</p>
]]></content>
      <tags>
        <tag>Google</tag>
        <tag>Camera</tag>
      </tags>
  </entry>
  <entry>
    <title>rclone的使用</title>
    <url>/2020/02/26/rclone%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>　推荐通过脚本快速安装，对于Linux/macOS/BSD系统，在终端中执行以下命令　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https://rclone.org/install.sh | sudo bash</span><br></pre></td></tr></table></figure>

<h2 id="引导"><a href="#引导" class="headerlink" title="引导"></a>引导</h2><p>　首先，由于各个对象存储系统的身份验证相当复杂，故Rclone都将起保存在config中。</p>
<p>通过下面命令来首次引导rclone</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure>


<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>Rclone将目录从一个存储系统同步到另一个存储系统。</p>
<p>它的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Syntax: [options] subcommand &lt;parameters&gt; &lt;parameters...&gt;</span><br></pre></td></tr></table></figure>

<p>源和目标路径由您在配置文件中给存储系统的名称指定，然后是子路径，例如“drive:myfolder”以查看Google驱动器中的“myfolder”。</p>
<p>您可以在配置文件中定义尽可能多的存储路径。</p>
<h2 id="子命令"><a href="#子命令" class="headerlink" title="子命令"></a>子命令</h2><p>rclone使用一个子命令系统。 例如：<br>rclone ls remote:path # lists a re<br>rclone copy /local/path remote:path # copies /local/path to the remote<br>rclone sync /local/path remote:path # syncs /local/path to the remote</p>
<p>具体使用列表请见《命令行汇总列表》</p>
<h2 id="复制单文件"><a href="#复制单文件" class="headerlink" title="复制单文件"></a>复制单文件</h2><p>rclone通常会同步或复制目录。 但是，如果源远程指向一个文件，rclone将只复制该文件。 目标远程站点必须指向一个目录 – 否则rclone会给出错误：<br>Failed to create file system for “remote:file”: is a file not a directory<br>比如你在remote有个文件叫test.jpg的想要复制，那你可以像下面这样复制：<br>rclone copy remote:test.jpg /tmp/download</p>
<p>文件test.jpg将被放置在/ tmp /下载。</p>
<p>这相当于指定<br>rclone copy –files-from /tmp/files remote: /tmp/download</p>
<p>/tmp/files包含单行</p>
<p>test.jpg放在<br>建议在复制单个文件时使用复制，而不是同步。 他们有几乎相同的效果，但复制将使用更少的内存。</p>
<h2 id="利用-复制文件和目录"><a href="#利用-复制文件和目录" class="headerlink" title="利用:复制文件和目录"></a>利用:复制文件和目录</h2><p>rclone使用:标记远程名称。 但是，这是非Windows操作系统中的有效文件名组件。 远程名称解析器只会搜索:直到第一个/所以如果您需要对像这样的文件或目录进行操作，则使用以/开头的完整路径，或使用./作为当前目录前缀。</p>
<p>因此，要将名为sync：me的目录同步到名为remote:的远程 就使用：<br>rclone sync ./sync:me remote:path<br>或者<br>rclone sync /full/path/to/sync:me remote:path</p>
<p>ssr://Z2Vja28uYnV6ejo4MDphdXRoX2NoYWluX2E6bm9uZTp0bHMxLjJfdGlja2V0X2F1dGg6WVdOeWIzTnpMV2RtZHk1amIyMC8_b2Jmc3BhcmFtPVlteHZaeTUwY3pNdVpYaHdiR2xqYVhRdVltbHVaeTV1WlhRJnByb3RvcGFyYW09TkRVMk5URTZWR2hFZUVaVSZyZW1hcmtzPTVwZWw1cHlzU2xBdFNWQXlLT1dBamVlT2h6b3hLUSZncm91cD01Nml6NWE2YTU3cV82TGV2</p>
<p><a href="https://dawangidc.net/modules/servers/UnlimitedSocks/subscribe.php?sid=13810&amp;token=ShYHhhR8Q6mc1" target="_blank" rel="noopener">https://dawangidc.net/modules/servers/UnlimitedSocks/subscribe.php?sid=13810&amp;token=ShYHhhR8Q6mc1</a></p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>rclone</tag>
      </tags>
  </entry>
  <entry>
    <title>常用命令</title>
    <url>/2019/12/09/demo/</url>
    <content><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -P 0000 username@192.168.1.1 root@ip</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport **** -j ACCEPT</span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu解决方案"><a href="#Ubuntu解决方案" class="headerlink" title="Ubuntu解决方案"></a>Ubuntu解决方案</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt-get install libsm6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo apt-get install libxrender1</span><br><span class="line"></span><br><span class="line">sudo apt-get install libxext-dev</span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu时区设置"><a href="#Ubuntu时区设置" class="headerlink" title="Ubuntu时区设置"></a>Ubuntu时区设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tzselect</span><br><span class="line"></span><br><span class="line">sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>
<p>改为上海的时区</p>
<blockquote>
</blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/71164003" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/71164003</a></p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>命令</tag>
        <tag>常用</tag>
        <tag>Ubuntu</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Proxifier Mac的使用</title>
    <url>/2019/11/09/Proxifier-Mac%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><strong>针对terminal下载国外镜像时速度较慢的问题</strong></p>
<h3 id="安装Proxifier"><a href="#安装Proxifier" class="headerlink" title="安装Proxifier"></a>安装Proxifier</h3><p>网上有大把的方法，此处不再赘述。</p>
<h3 id="查看小飞机的监听地址和端口"><a href="#查看小飞机的监听地址和端口" class="headerlink" title="查看小飞机的监听地址和端口"></a>查看小飞机的监听地址和端口</h3><img src="" style="zoom:67%;" />





]]></content>
      <tags>
        <tag>教程</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>ChineseOCR</title>
    <url>/2019/11/09/ChineseOCR/</url>
    <content><![CDATA[<p>说明：lz水平有限只是运行该repo的代码</p>
<h2 id="1、本文使用chineseocr的GitHub-repo"><a href="#1、本文使用chineseocr的GitHub-repo" class="headerlink" title="1、本文使用chineseocr的GitHub repo"></a>1、本文使用chineseocr的<a href="https://github.com/chineseocr/chineseocr" target="_blank" rel="noopener">GitHub repo</a></h2><ul>
<li><h3 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h3><ul>
<li>Mac OS 10.15 </li>
<li>Anaconda 4.7.12</li>
<li>Python 3.6</li>
<li>Tensorflow 1.9</li>
</ul>
</li>
</ul>
<h4 id="由于lz采用的CPU版本的setup-md故仅讨论cpu版本的设置。"><a href="#由于lz采用的CPU版本的setup-md故仅讨论cpu版本的设置。" class="headerlink" title="由于lz采用的CPU版本的setup.md故仅讨论cpu版本的设置。"></a>由于lz采用的CPU版本的setup.md故仅讨论cpu版本的设置。</h4><h2 id="2、下载models、darknet文件"><a href="#2、下载models、darknet文件" class="headerlink" title="2、下载models、darknet文件"></a>2、下载models、darknet文件</h2><ul>
<li><h3 id="分别将下载的文件放入model、darknet的文件夹"><a href="#分别将下载的文件放入model、darknet的文件夹" class="headerlink" title="分别将下载的文件放入model、darknet的文件夹"></a>分别将下载的文件放入model、darknet的文件夹</h3><h3 id="model-goolge-drive链接"><a href="#model-goolge-drive链接" class="headerlink" title="model: goolge drive链接"></a>model: <a href="https://drive.google.com/open?id=1nAVj1pGvtw0LE_wAU5fMulekboScjAaK" target="_blank" rel="noopener">goolge drive链接</a></h3><h3 id="darknet-goolge-drive链接"><a href="#darknet-goolge-drive链接" class="headerlink" title="darknet: goolge drive链接"></a>darknet: <a href="https://drive.google.com/open?id=117Vqy-2-keVg5uqzGvZE-XQjJ6S6O2j2" target="_blank" rel="noopener">goolge drive链接</a></h3></li>
</ul>
<h2 id="3、CPU-环境配置，支持linux-macOs"><a href="#3、CPU-环境配置，支持linux-macOs" class="headerlink" title="3、CPU 环境配置，支持linux\macOs"></a>3、CPU 环境配置，支持linux\macOs</h2><ul>
<li>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n chineseocr python=3.6 pip scipy numpy jupyter ipython</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4、运用conda-创建python环境"><a href="#4、运用conda-创建python环境" class="headerlink" title="4、运用conda 创建python环境"></a>4、运用conda 创建python环境</h2><ul>
<li><p>激活创建的环境</p>
</li>
<li><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> activate chineseocr</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译</p>
</li>
<li><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> darknet/ &amp;&amp; make &amp;&amp; <span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure>
</li>
<li><p>pip安装各种库</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install easydict opencv-contrib-python==<span class="number">4.0</span><span class="number">.0</span><span class="number">.21</span> Cython h5py lmdb mahotas pandas requests bs4 matplotlib lxml -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure>
</li>
<li><p>注：lz在此处安装mahotas时报错，是由于Mac OS版本问题，因此在安装时，可单独进行</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MACOSX_DEPLOYMENT_TARGET=10.9 pip install mahotas -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure>

  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install -U pillow -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure>

  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install web.py==<span class="number">0.40</span>.dev0 redis</span><br></pre></td></tr></table></figure>

  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install keras==<span class="number">2.1</span><span class="number">.5</span> tensorflow==<span class="number">1.9</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="5、使用conda安装pytorch、torchvision"><a href="#5、使用conda安装pytorch、torchvision" class="headerlink" title="5、使用conda安装pytorch、torchvision"></a>5、使用conda安装pytorch、torchvision</h2><ul>
<li> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision -c pytorch</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Hexo+Github Pages搭建小博客</title>
    <url>/2019/05/09/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%B0%8F%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="Hexo-GitHub-pages搭建个人小博客"><a href="#Hexo-GitHub-pages搭建个人小博客" class="headerlink" title="Hexo + GitHub pages搭建个人小博客"></a>Hexo + GitHub pages搭建个人小博客</h1><h2 id="Hexo的配置使用"><a href="#Hexo的配置使用" class="headerlink" title="Hexo的配置使用"></a>Hexo的配置使用</h2><h3 id="1、安装git和node-js"><a href="#1、安装git和node-js" class="headerlink" title="1、安装git和node.js"></a>1、安装git和node.js</h3><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-Git的安装"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-Git的安装" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Git的安装"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Git的安装</h4><blockquote>
<p>Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>&nbsp;</p>
</blockquote>
<p>安装Git来控制我们代码的版本管理，<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>的官网在这里。浏览器会根据我们的系统来判断需要下载的安装包。(此处讲的是windows系统的安装）</p>
<h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-node-js的安装"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-node-js的安装" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.js的安装"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.js的安装</h4><blockquote>
<p>Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。 发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。<br>&nbsp;</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;node.js中文官网在<a href="(https://nodejs.org/zh-cn/)">这里</a>。</p>
<h3 id="2、安装Hexo"><a href="#2、安装Hexo" class="headerlink" title="2、安装Hexo"></a>2、安装Hexo</h3><h3 id="windows的安装"><a href="#windows的安装" class="headerlink" title="windows的安装"></a>windows的安装</h3><p>安装完Git后，在桌面右击有一个<strong><em>Git Bash Here</em></strong>的选项，选择。在弹出的命令行里输入以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h3 id="Mac的安装"><a href="#Mac的安装" class="headerlink" title="Mac的安装"></a>Mac的安装</h3><p>开启Terminal执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>通过命令行cd进在自己想部署的文件夹中，执行初始化命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blogname(&lt;-自定)</span><br><span class="line"></span><br><span class="line">cd blogname</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>在执行完这些这些命令后，不出错的话，我们可以执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>打开浏览器，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:4000</span><br></pre></td></tr></table></figure>
<p>即可得到我们的本地的预览效果。</p>
<h3 id="3、部署至GitHub-pages上"><a href="#3、部署至GitHub-pages上" class="headerlink" title="3、部署至GitHub pages上"></a>3、部署至GitHub pages上</h3><h4 id="GitHub新建一个仓库，命名为yourname-github-io，记录下仓库的地址类似https-github-com-username-username-github-io-git"><a href="#GitHub新建一个仓库，命名为yourname-github-io，记录下仓库的地址类似https-github-com-username-username-github-io-git" class="headerlink" title="GitHub新建一个仓库，命名为yourname.github.io，记录下仓库的地址类似https://github.com/username/username.github.io.git."></a>GitHub新建一个仓库，命名为<strong>yourname.github.io</strong>，记录下仓库的地址类似<strong><a href="https://github.com/username/username.github.io.git" target="_blank" rel="noopener">https://github.com/username/username.github.io.git</a></strong>.</h4><h4 id="接着我们去修改该文件夹目录的-config-yml"><a href="#接着我们去修改该文件夹目录的-config-yml" class="headerlink" title="接着我们去修改该文件夹目录的_config.yml"></a>接着我们去修改该文件夹目录的<strong>_config.yml</strong></h4><p>找到下面这段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  messgage:</span><br></pre></td></tr></table></figure>
<p>注意冒号后有一个空格。</p>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>稍等一分钟，即可去我们的仓库地址查看我们的博客了。</p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo!</title>
    <url>/2019/05/09/hello-world/</url>
    <content><![CDATA[<h2 id="欢迎使用Hexo，这是一个快速入门的教程。"><a href="#欢迎使用Hexo，这是一个快速入门的教程。" class="headerlink" title="欢迎使用Hexo，这是一个快速入门的教程。"></a>欢迎使用Hexo，这是一个快速入门的教程。</h2><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一个新的post"><a href="#创建一个新的post" class="headerlink" title="创建一个新的post"></a>创建一个新的post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>


<h3 id="运行服务在本地端口"><a href="#运行服务在本地端口" class="headerlink" title="运行服务在本地端口"></a>运行服务在本地端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>



<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>


<h3 id="部署到远程服务器"><a href="#部署到远程服务器" class="headerlink" title="部署到远程服务器"></a>部署到远程服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
